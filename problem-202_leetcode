Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

 




// floid cycle 
//happy no end with 1 using cycle detection approach of DSA
class Solution {
    public boolean isHappy(int n) {
     List<Integer> list=new ArrayList<Integer>();  
      while(n!=1)
      {
          int temp=n;
           n=0;
          while(temp>0)
          {
              n=n+(int)Math.pow((temp%10),2);
              temp=temp/10;
          }
              if(list.contains(n))
              {
                  return false;
              }
              else 
                  list.add(n);
          }
      
        return true;
    }
}
